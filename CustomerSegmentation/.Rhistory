install.packages("swirl")
install.packages("UsingR")
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
library(UsingR)
install.packages("Hmisc")
library(UsingR)
library(Hmisc)
install.packages('Hmisc')
install.packages("rpart", "nnet", "cluster", "scales", "colorspace", "munsell", "scales", "ggplot2", "latticeExtras", "RColorBrewer", "survival", "Matrix", "lavaan", "Hmisc")
install.packages("rpart", "nnet", "cluster", "scales", "colorspace", "munsell", "scales", "ggplot2", "latticeExtras", "RColorBrewer", "survival", "Matrix", "lavaan", "Hmisc")
install.packages('Hmisc')
library(UsingR)
data(galton)
library(dplyr); library(ggplot2)
install.packages(c("plyr", "dplyr"), lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
library(UsingR)
data(galton)
library(dplyr); library(ggplot2)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
df <- read.csv('hw1_data.csv')
df <- read.csv('Downloads/hw1_data.csv')
df.colnames()
df.columns()
head(df
)
tail(df)
df[47]
df[47,]
is.na(df)
count(is.na(df))
mean(df[,'Ozone'])
newdf <- subset(df,Ozone>31 and Temp>90,Solar.R)
newdf <- subset(df,Ozone>31 & Temp>90,Solar.R)
mean(newdf)
newdf
apply(newdf,2,mean)
install.packages("data.table", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(data.table)
iris_dt <- as.data.table(iris)
iris_dt[Species == "virginica",round(mean(Sepal.Length)) ]
library(randomForest)
library(mlbench)
library(caret)
library(e1071)
# load dataset
data(Sonar)
dataset <- Sonar
x <- dataset[,1:60]   # predictors
y <- dataset[,61]     # labels
install.packages("e1071", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("mlbench", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(mlbench)
library(e1071)
# load dataset
data(Sonar)
dataset <- Sonar
x <- dataset[,1:60]   # predictors
y <- dataset[,61]     # labels
# Tune using algorithm tools
# Algorithm Tune (tuneRF)
set.seed(seed)
bestmtry <- tuneRF(x, y, stepFactor=1.5, improve=1e-5, ntree=500)
print(bestmtry)
# Tune using algorithm tools
# Algorithm Tune (tuneRF)
set.seed(101)
bestmtry <- tuneRF(x, y, stepFactor=1.5, improve=1e-5, ntree=500)
print(bestmtry)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
set.seed(101)
mtry <- sqrt(ncol(x))
tunegrid <- expand.grid(.mtry=bestmtry)
rf_default <- train(Class ~ ., data=dataset, method="rf", metric="Accuracy", tuneGrid=tunegrid, trControl=control)
print(rf_default)
#Creating a new variable that is linear combination of variables:
dataset$newvar <- rowSums(sweep(dataset, 2, v1, FUN='*'))
#Creating a new variable that is linear combination of variables:
dataset$newvar <- rowSums(sweep(dataset, 2, 50, FUN='*'))
library(lm)
lm()
library(ggplot2)
str(diamonds)
hist(diamonds$price)
summary(log(diamonds$price))
diamonds$log_price <- log(diamonds$price)
diamonds$price <- NULL
cor(diamonds$carat,diamonds$log_price)
set.seed(101)
idx = sample(nrow(diamonds),nrow(diamonds)*0.8)
train = diamonds[idx,]
test = diamonds[-idx,]
train
model1 = lm(log_price~.,data=train)
model2 = lm(log_price~carat+cut+color,data = train)
summary(model1)
predict(model1,newdata = test)
setwd("~/Documents/Projects/CustomerSegmentation")
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages('xlsx')
customers <- read.csv("bikeshops.csv")
products <- read.csv("bikes.csv")
orders <- read.csv("orders.csv")
library(dplyr)
orders.extended <- merge(orders, customers, by.x = "customer.id", by.y="bikeshop.id")
orders.extended <- merge(orders.extended, products, by.x = "product.id", by.y = "bike.id")
orders.extended <- orders.extended %>%
mutate(price.extended = price * quantity) %>%
select(order.date, order.id, order.line, bikeshop.name, model,
quantity, price, price.extended, category1, category2, frame) %>%
arrange(order.id, order.line)
knitr::kable(head(orders.extended)) # Preview the data
library(dplyr)
orders.extended <- merge(orders, customers, by.x = "customer.id", by.y="bikeshop.id")
orders.extended <- merge(orders.extended, products, by.x = "product.id", by.y = "bike.id")
orders.extended <- orders.extended %>%
mutate(price.extended = price * quantity) %>%
select(order.date, order.id, order.line, bikeshop.name, model,
quantity, price, price.extended, category1, category2, frame) %>%
arrange(order.id, order.line)
knitr::kable(head(orders.extended)) # Preview the data
View(customers)
head(customers)
describe(customers)
str(customers)
str(products)
str(orders)
library(tidyr)  # Needed for spread function
customerTrends <- orders.extended %>%
group_by(bikeshop.name, model, category1, category2, frame, price) %>%
summarise(total.qty = sum(quantity)) %>%
spread(bikeshop.name, total.qty)
customerTrends[is.na(customerTrends)] <- 0  # Remove NA's
# Convert price to binary high/low category ------------------------------------
library(Hmisc)  # Needed for cut2 function
customerTrends$price <- cut2(customerTrends$price, g=2)
